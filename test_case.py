
import numpy as np
from numpy import array, dtype


class TestCase():
    def __init__(self, name='Test Case'):
        self.name = name

    def case33(self, isrep=False):
        """ Power flow data for 33 bus, 6 generator case.
        Please see L{caseformat} for details on the case file format.
        Based on data from ...
        Alsac, O. & Stott, B., I{"Optimal Load Flow with Steady State Security"},
        IEEE Transactions on Power Apparatus and Systems, Vol. PAS 93, No. 3,
        1974, pp. 745-751.
        ... with branch parameters rounded to nearest 0.01, shunt values divided
        by 100 and shunt on bus 10 moved to bus 5, load at bus 5 zeroed out.
        Generator locations, costs and limits and bus areas were taken from ...
        Ferrero, R.W., Shahidehpour, S.M., Ramesh, V.C., I{"Transaction analysis
        in deregulated power systems using game theory"}, IEEE Transactions on
        Power Systems, Vol. 12, No. 3, Aug 1997, pp. 1340-1347.
        Generator Q limits were derived from Alsac & Stott, using their Pmax
        capacities. V limits and line |S| limits taken from Alsac & Stott.
        @return: Power flow data for 30 bus, 6 generator case.
        @see: U{http://www.pserc.cornell.edu/matpower/}
        """
        from numpy import ix_
        from pypower.idx_bus import BASE_KV, BUS_I, PQ, PV, REF, BUS_TYPE
        from pypower.idx_brch import BR_R, BR_X, F_BUS, T_BUS
        from pypower.idx_gen import GEN_BUS

        ppc = {"version": '2'}

        ##-----  Power Flow Data  -----##
        ## system MVA base
        ppc["baseMVA"] = 100.0

        ## bus data
        # bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin
        ppc["bus"] = array([
            [1, 3, 0, 0, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [2, 1, 0.1, 0.06, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [3, 1, 0.09, 0.04, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [4, 1, 0.12, 0.08, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [5, 1, 0.06, 0.03, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [6, 1, 0.06, 0.02, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [7, 1, 0.2, 0.1, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [8, 1, 0.2, 0.1, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [9, 1, 0.06, 0.02, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [10, 1, 0.06, 0.02, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [11, 1, 0.045, 0.03, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [12, 1, 0.06, 0.035, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [13, 1, 0.06, 0.035, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [14, 1, 0.12, 0.08, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [15, 1, 0.06, 0.01, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [16, 1, 0.06, 0.02, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [17, 1, 0.06, 0.02, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [18, 1, 0.09, 0.04, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [19, 1, 0.09, 0.04, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [20, 1, 0.09, 0.04, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [21, 1, 0.09, 0.04, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [22, 1, 0.09, 0.04, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [23, 1, 0.09, 0.05, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [24, 1, 0.42, 0.20, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [25, 1, 0.42, 0.2, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [26, 1, 0.06, 0.025, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [27, 1, 0.06, 0.025, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [28, 1, 0.06, 0.02, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [29, 1, 0.12, 0.07, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [30, 1, 0.2, 0.6, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [31, 1, 0.15, 0.07, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [32, 1, 0.21, 0.1, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [33, 1, 0.06, 0.04, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
        ])

        ## generator data
        # bus, Pg, Qg, Qmax, Qmin, Vg, mBase, status, Pmax, Pmin, Pc1, Pc2,
        # Qc1min, Qc1max, Qc2min, Qc2max, ramp_agc, ramp_10, ramp_30, ramp_q, apf
        # the gen information is only of DS substation, microgrid will be added to
        # DS later
        ppc["gen"] = array([
             [1, 0, 0, 10.0, -10.0, 1, 100.0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                                         0, 0, 0]
            # [21, 0, 0, 0.35, -0.35, 1, 100, 1, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            #                                                             0, 0, 0],
            # [25, 0, 0, 0.30, -0.30, 1, 100, 1, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            #                                                             0, 0, 0],

        ])

        ## branch data
        # fbus, tbus, r, x, b, rateA, rateB, rateC, ratio, angle, status, angmin,
        # angmax
        # Note that r, x, b are nominal value here and will later be converted
        # to per unit value.
        ppc["branch"] = array([
            [1, 2, 0.0922, 0.0470, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [2, 3, 0.4930, 0.2511, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [3, 4, 0.3660, 0.1864, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [4, 5, 0.3811, 0.1941, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [5, 6, 0.8190, 0.7070, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [6, 7, 0.1872, 0.6188, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [7, 8, 0.7114, 0.2351, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [8, 9, 1.0300, 0.7400, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [9, 10, 1.0440, 0.7400, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [10, 11, 0.1966, 0.0650, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [11, 12, 0.3744, 0.1238, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [12, 13, 1.4680, 1.1550, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [13, 14, 0.5416, 0.7129, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [14, 15, 0.5910, 0.5260, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [15, 16, 0.7463, 0.5450, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [16, 17, 1.2890, 1.7210, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [17, 18, 0.7320, 0.5740, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [2, 19, 0.1640, 0.1565, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [19, 20, 1.5042, 1.3554, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [20, 21, 0.4095, 0.4784, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [21, 22, 0.7089, 0.9373, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [3, 23, 0.4512, 0.3083, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [23, 24, 0.8980, 0.7091, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [24, 25, 0.8960, 0.7011, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [6, 26, 0.2030, 0.1034, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [26, 27, 0.2842, 0.1447, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [27, 28, 1.0590, 0.9337, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [28, 29, 0.8042, 0.7006, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [29, 30, 0.5075, 0.2585, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [30, 31, 0.9744, 0.9630, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [31, 32, 0.3105, 0.3619, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [32, 33, 0.3410, 0.5302, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            # tie lines
            [8, 21, 2.0000, 2.0000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [9, 15, 2.0000, 2.0000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [12, 22, 2.0000, 2.0000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [18, 33, 0.5000, 0.5000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [25, 29, 0.5000, 0.5000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
        ])

        ##-----  OPF Data  -----##
        ## area data
        # area refbus
        ppc["areas"] = array([
            [1, 8],
            [2, 23],
            [3, 26],
        ])

        ## generator cost data
        # 1 startup shutdown n x1 y1 ... xn yn
        # 2 startup shutdown n c(n-1) ... c0
        ppc["gencost"] = array([
            [2, 0, 0, 3, 0, 20, 0]
            # [2, 0, 0, 3, 0, 20, 0],
            # [2, 0, 0, 3, 0, 20, 0]
        ])

        # combine ppc to form large distribution network
        if isrep is True:
            ppc = self.combine_ppc(ppc, ppc, ppc, ppc)

        # Update ppc['gen'] considering microgrid
        ssc = self.sscase()
        n_microgrid = np.sum(ssc['station']['station_type'] == 'microgrid')

        if isrep:
            ppc['gen'] = np.tile(ppc['gen'], reps=(n_microgrid, 1))
        # Obtain microgrids' bus no.
        # +1 means the bus no. on map, later it will -1 again.
            ppc['gen'][:, GEN_BUS] = ssc['station'][ssc['station']['station_type']
                                                == 'microgrid']['bus_i'] + 1
            ppc['gencost'] = np.tile(ppc['gencost'][0], reps=(n_microgrid, 1))

        # Unit conversion
        vbase = ppc['bus'][0, BASE_KV] * 1e3
        sbase = ppc['baseMVA'] * 1e6
        ppc['branch'][:, [BR_R, BR_X]] = ppc['branch'][:, [BR_R, BR_X]] / (
                vbase**2 / sbase)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For bus
        ppc['bus'][:, BUS_I] -= 1
        # For branch
        ppc['branch'][:, [F_BUS, T_BUS]] -= 1
        # For gen
        # if ppc['gen'].size: # CHeck if a array is empty
        ppc['gen'][:, GEN_BUS] -= 1

        # Set generator bus type to type 3 (REF bus) for use in pandapower
        # Only for use in pandapower
        # Set all bus type to PQ bus
        ppc['bus'][:, BUS_TYPE] = PQ
        # Set generator bus to REF bus
        # if ppc['gen'].size:
        ppc['bus'][ppc['gen'][:, GEN_BUS].astype(int), BUS_TYPE] = REF

        # Check if gen is matched with gencost
        if not ppc['gen'].shape[0] == ppc['gencost'].shape[0]:
            raise Exception("ppc['gen'] is not matched with ppc['gencost']")

        return ppc

    def combine_ppc(self, *args):

        from pypower.idx_bus import BASE_KV, BUS_I, PQ, PV, REF, BUS_TYPE
        from pypower.idx_brch import BR_R, BR_X, F_BUS, T_BUS
        from pypower.idx_gen import GEN_BUS

        # Initialization of ppc_joint from the first argument
        # ppc_joint = {}
        #
        # # for e_key in args[0].keys():
        # #     ppc_joint[e_key] = args[0][e_key]

        from copy import deepcopy

        ppc_joint = deepcopy(args[0])  # The first ppc is used for initialization

        for e_ppc in args[1:]:  # Start from the second ppc
            e_ppc = deepcopy(e_ppc)  # *** important！！！

            # bus_offset = ppc_joint['bus'][-1, BUS_I] + 1
            bus_offset = ppc_joint['bus'][-1, BUS_I]

            e_ppc['bus'][:, BUS_I] += bus_offset
            ppc_joint['bus'] = np.concatenate((ppc_joint['bus'], e_ppc['bus']),
                                              axis=0)

            # e_ppc['gen'][:, GEN_BUS] += bus_offset
            # ppc_joint['gen'] = np.concatenate((ppc_joint['gen'], e_ppc['gen']),
            #                                   axis=0)

            e_ppc['branch'][:, [F_BUS, T_BUS]] += bus_offset
            ppc_joint['branch'] = np.concatenate((ppc_joint['branch'],
                                               e_ppc['branch']), axis=0)

            # ppc_joint['areas'] = np.concatenate((ppc_joint['areas'],
            #                                   e_ppc['areas']), axis=0)

            # ppc_joint['gencost'] = np.concatenate((ppc_joint['gencost'],
            #                                     e_ppc['gencost']), axis=0)

        return ppc_joint

    def case33_large(self, isrep=False):
        """ Power flow data for 33 bus, 6 generator case.
        Please see L{caseformat} for details on the case file format.
        Based on data from ...
        Alsac, O. & Stott, B., I{"Optimal Load Flow with Steady State Security"},
        IEEE Transactions on Power Apparatus and Systems, Vol. PAS 93, No. 3,
        1974, pp. 745-751.
        ... with branch parameters rounded to nearest 0.01, shunt values divided
        by 100 and shunt on bus 10 moved to bus 5, load at bus 5 zeroed out.
        Generator locations, costs and limits and bus areas were taken from ...
        Ferrero, R.W., Shahidehpour, S.M., Ramesh, V.C., I{"Transaction analysis
        in deregulated power systems using game theory"}, IEEE Transactions on
        Power Systems, Vol. 12, No. 3, Aug 1997, pp. 1340-1347.
        Generator Q limits were derived from Alsac & Stott, using their Pmax
        capacities. V limits and line |S| limits taken from Alsac & Stott.
        @return: Power flow data for 30 bus, 6 generator case.
        @see: U{http://www.pserc.cornell.edu/matpower/}
        """
        from numpy import ix_
        from pypower.idx_bus import BASE_KV, BUS_I, PQ, PV, REF, BUS_TYPE
        from pypower.idx_brch import BR_R, BR_X, F_BUS, T_BUS
        from pypower.idx_gen import GEN_BUS

        ppc = {"version": '2'}

        ##-----  Power Flow Data  -----##
        ## system MVA base
        ppc["baseMVA"] = 100.0

        ## bus data
        # bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin
        ppc["bus"] = array([
            [1, 3, 0, 0, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [2, 1, 0.1, 0.06, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [3, 1, 0.09, 0.04, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [4, 1, 0.12, 0.08, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [5, 1, 0.06, 0.03, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [6, 1, 0.06, 0.02, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [7, 1, 0.2, 0.1, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [8, 1, 0.2, 0.1, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [9, 1, 0.06, 0.02, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [10, 1, 0.06, 0.02, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [11, 1, 0.045, 0.03, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [12, 1, 0.06, 0.035, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [13, 1, 0.06, 0.035, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [14, 1, 0.12, 0.08, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [15, 1, 0.06, 0.01, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [16, 1, 0.06, 0.02, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [17, 1, 0.06, 0.02, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [18, 1, 0.09, 0.04, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [19, 1, 0.09, 0.04, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [20, 1, 0.09, 0.04, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [21, 1, 0.09, 0.04, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [22, 1, 0.09, 0.04, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [23, 1, 0.09, 0.05, 0, 0, 2, 1, 0, 12.66, 1, 1.05, 0.95],
            [24, 1, 0.42, 0.20, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [25, 1, 0.42, 0.2, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [26, 1, 0.06, 0.025, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [27, 1, 0.06, 0.025, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [28, 1, 0.06, 0.02, 0, 0, 1, 1, 0, 12.66, 1, 1.05, 0.95],
            [29, 1, 0.12, 0.07, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [30, 1, 0.2, 0.6, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [31, 1, 0.15, 0.07, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [32, 1, 0.21, 0.1, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
            [33, 1, 0.06, 0.04, 0, 0, 3, 1, 0, 12.66, 1, 1.05, 0.95],
        ])

        ## generator data
        # bus, Pg, Qg, Qmax, Qmin, Vg, mBase, status, Pmax, Pmin, Pc1, Pc2,
        # Qc1min, Qc1max, Qc2min, Qc2max, ramp_agc, ramp_10, ramp_30, ramp_q, apf
        # the gen information is only of DS substation, microgrid will be added to
        # DS later
        ppc["gen"] = array([
             [1, 0, 0, 10.0, -10.0, 1, 100.0, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                                         0, 0, 0]
            # [21, 0, 0, 0.35, -0.35, 1, 100, 1, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            #                                                             0, 0, 0],
            # [25, 0, 0, 0.30, -0.30, 1, 100, 1, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            #                                                             0, 0, 0],

        ])

        ## branch data
        # fbus, tbus, r, x, b, rateA, rateB, rateC, ratio, angle, status, angmin,
        # angmax
        # Note that r, x, b are nominal value here and will later be converted
        # to per unit value.
        ppc["branch"] = array([
            [1, 2, 0.0922, 0.0470, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [2, 3, 0.4930, 0.2511, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [3, 4, 0.3660, 0.1864, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [4, 5, 0.3811, 0.1941, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [5, 6, 0.8190, 0.7070, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [6, 7, 0.1872, 0.6188, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [7, 8, 0.7114, 0.2351, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [8, 9, 1.0300, 0.7400, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [9, 10, 1.0440, 0.7400, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [10, 11, 0.1966, 0.0650, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [11, 12, 0.3744, 0.1238, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [12, 13, 1.4680, 1.1550, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [13, 14, 0.5416, 0.7129, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [14, 15, 0.5910, 0.5260, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [15, 16, 0.7463, 0.5450, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [16, 17, 1.2890, 1.7210, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [17, 18, 0.7320, 0.5740, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [2, 19, 0.1640, 0.1565, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [19, 20, 1.5042, 1.3554, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [20, 21, 0.4095, 0.4784, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [21, 22, 0.7089, 0.9373, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [3, 23, 0.4512, 0.3083, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [23, 24, 0.8980, 0.7091, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [24, 25, 0.8960, 0.7011, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [6, 26, 0.2030, 0.1034, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [26, 27, 0.2842, 0.1447, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [27, 28, 1.0590, 0.9337, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [28, 29, 0.8042, 0.7006, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [29, 30, 0.5075, 0.2585, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [30, 31, 0.9744, 0.9630, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [31, 32, 0.3105, 0.3619, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            [32, 33, 0.3410, 0.5302, 0, 250, 250, 250, 0, 0, 1, -360, 360],
            # tie lines
            [8, 21, 2.0000, 2.0000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [9, 15, 2.0000, 2.0000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [12, 22, 2.0000, 2.0000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [18, 33, 0.5000, 0.5000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
            [25, 29, 0.5000, 0.5000, 0, 250, 250, 250, 0, 0, 0, -360, 360],
        ])

        ##-----  OPF Data  -----##
        ## area data
        # area refbus
        ppc["areas"] = array([
            [1, 8],
            [2, 23],
            [3, 26],
        ])

        ## generator cost data
        # 1 startup shutdown n x1 y1 ... xn yn
        # 2 startup shutdown n c(n-1) ... c0
        ppc["gencost"] = array([
            [2, 0, 0, 3, 0, 20, 0]
            # [2, 0, 0, 3, 0, 20, 0],
            # [2, 0, 0, 3, 0, 20, 0]
        ])

        # combine ppc to form large distribution network
        ppc = self.combine_ppc(ppc, ppc, ppc, ppc, ppc, ppc)

        # Update ppc['gen'] considering microgrid
        ssc = self.sscase_large()
        n_microgrid = np.sum(ssc['station']['station_type'] == 'microgrid')

        if isrep:
            ppc['gen'] = np.tile(ppc['gen'], reps=(n_microgrid, 1))
        # Obtain microgrids' bus no.
        # +1 means the bus no. on map, later it will -1 again.
            ppc['gen'][:, GEN_BUS] = ssc['station'][ssc['station']['station_type']
                                                == 'microgrid']['bus_i'] + 1
            ppc['gencost'] = np.tile(ppc['gencost'][0], reps=(n_microgrid, 1))

        # Unit conversion
        vbase = ppc['bus'][0, BASE_KV] * 1e3
        sbase = ppc['baseMVA'] * 1e6
        ppc['branch'][:, [BR_R, BR_X]] = ppc['branch'][:, [BR_R, BR_X]] / (
                vbase**2 / sbase)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For bus
        ppc['bus'][:, BUS_I] -= 1
        # For branch
        ppc['branch'][:, [F_BUS, T_BUS]] -= 1
        # For gen
        # if ppc['gen'].size: # CHeck if a array is empty
        ppc['gen'][:, GEN_BUS] -= 1

        # Set generator bus type to type 3 (REF bus) for use in pandapower
        # Only for use in pandapower
        # Set all bus type to PQ bus
        ppc['bus'][:, BUS_TYPE] = PQ
        # Set generator bus to REF bus
        # if ppc['gen'].size:
        ppc['bus'][ppc['gen'][:, GEN_BUS].astype(int), BUS_TYPE] = REF

        # Check if gen is matched with gencost
        if not ppc['gen'].shape[0] == ppc['gencost'].shape[0]:
            raise Exception("ppc['gen'] is not matched with ppc['gencost']")

        return ppc

    def combine_ppc_large(self, *args):

        from pypower.idx_bus import BASE_KV, BUS_I, PQ, PV, REF, BUS_TYPE
        from pypower.idx_brch import BR_R, BR_X, F_BUS, T_BUS
        from pypower.idx_gen import GEN_BUS

        # Initialization of ppc_joint from the first argument
        # ppc_joint = {}
        #
        # # for e_key in args[0].keys():
        # #     ppc_joint[e_key] = args[0][e_key]

        from copy import deepcopy

        ppc_joint = deepcopy(args[0])  # The first ppc is used for initialization

        for e_ppc in args[1:]:  # Start from the second ppc
            e_ppc = deepcopy(e_ppc)  # *** important！！！

            # bus_offset = ppc_joint['bus'][-1, BUS_I] + 1
            bus_offset = ppc_joint['bus'][-1, BUS_I]

            e_ppc['bus'][:, BUS_I] += bus_offset
            ppc_joint['bus'] = np.concatenate((ppc_joint['bus'], e_ppc['bus']),
                                              axis=0)

            # e_ppc['gen'][:, GEN_BUS] += bus_offset
            # ppc_joint['gen'] = np.concatenate((ppc_joint['gen'], e_ppc['gen']),
            #                                   axis=0)

            e_ppc['branch'][:, [F_BUS, T_BUS]] += bus_offset
            ppc_joint['branch'] = np.concatenate((ppc_joint['branch'],
                                               e_ppc['branch']), axis=0)

            # ppc_joint['areas'] = np.concatenate((ppc_joint['areas'],
            #                                   e_ppc['areas']), axis=0)

            # ppc_joint['gencost'] = np.concatenate((ppc_joint['gencost'],
            #                                     e_ppc['gencost']), axis=0)

        return ppc_joint

    def siouxfalls(self):
        ''' Transportation systems case
        https: // github.com / bstabler / TransportationNetworks
        :return:
        '''

        from numpy import array

        tsc = {}

        # Transportaton system case
        # node data (??? The coordinates of x, y)
        data_type = dtype({'names': ('node_i', 'x', 'y'),
                    'formats': ('i4', 'f8', 'f8')
                    })

        tsc['node'] = array([
            (1, 50000, 510000),
            (2, 320000, 510000),
            (3, 50000, 440000),
            (4, 130000, 440000),
            (5, 220000, 440000),
            (6, 320000, 440000),
            (7, 420000, 380000),
            (8, 320000, 380000),
            (9, 220000, 380000),
            (10, 220000, 320000),
            (11, 130000, 320000),
            (12, 50000, 320000),
            (13, 50000, 50000),
            (14, 130000, 190000),
            (15, 220000, 190000),
            (16, 320000, 320000),
            (17, 320000, 260000),
            (18, 420000, 320000),
            (19, 320000, 190000),
            (20, 320000, 50000),
            (21, 220000, 50000),
            (22, 220000, 130000),
            (23, 130000, 130000),
            (24, 130000, 50000),
        ], dtype=data_type)

        # Init node Term node 	Capacity 	Length 	Free Flow Time 	B	Power
        # Speed limit 	Toll 	Type	;
        # INIT_NODE = 0
        # TERM_NODE = 1
        data_type = dtype({'names': ('init_node', 'term_node', 'capacity', 'length',
                               'free_flow_time', 'b', 'power', 'speed_limit',
                               'toll', 'type'),
                    'formats': ('i4', 'i4', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8',
                                'f8', 'i4')
                    })
        tsc['edge'] = array([
            (1, 2, 25900.20064, 6, 6, 0.15, 4, 0, 0, 1),
            (1, 3, 23403.47319, 4, 4, 0.15, 4, 0, 0, 1),
            (2, 1, 25900.20064, 6, 6, 0.15, 4, 0, 0, 1),
            (2, 6, 4958.180928, 5, 5, 0.15, 4, 0, 0, 1),
            (3, 1, 23403.47319, 4, 4, 0.15, 4, 0, 0, 1),
            (3, 4, 17110.52372, 4, 4, 0.15, 4, 0, 0, 1),
            (3, 12, 23403.47319, 4, 4, 0.15, 4, 0, 0, 1),
            (4, 3, 17110.52372, 4, 4, 0.15, 4, 0, 0, 1),
            (4, 5, 17782.7941, 2, 2, 0.15, 4, 0, 0, 1),
            (4, 11, 4908.82673, 6, 6, 0.15, 4, 0, 0, 1),
            (5, 4, 17782.7941, 2, 2, 0.15, 4, 0, 0, 1),
            (5, 6, 4947.995469, 4, 4, 0.15, 4, 0, 0, 1),
            (5, 9, 10000, 5, 5, 0.15, 4, 0, 0, 1),
            (6, 2, 4958.180928, 5, 5, 0.15, 4, 0, 0, 1),
            (6, 5, 4947.995469, 4, 4, 0.15, 4, 0, 0, 1),
            (6, 8, 4898.587646, 2, 2, 0.15, 4, 0, 0, 1),
            (7, 8, 7841.81131, 3, 3, 0.15, 4, 0, 0, 1),
            (7, 18, 23403.47319, 2, 2, 0.15, 4, 0, 0, 1),
            (8, 6, 4898.587646, 2, 2, 0.15, 4, 0, 0, 1),
            (8, 7, 7841.81131, 3, 3, 0.15, 4, 0, 0, 1),
            (8, 9, 5050.193156, 10, 10, 0.15, 4, 0, 0, 1),
            (8, 16, 5045.822583, 5, 5, 0.15, 4, 0, 0, 1),
            (9, 5, 10000, 5, 5, 0.15, 4, 0, 0, 1),
            (9, 8, 5050.193156, 10, 10, 0.15, 4, 0, 0, 1),
            # (9, 10, 13915.78842, 3, 3, 0.15, 4, 0, 0, 1),
            # (10, 9, 13915.78842, 3, 3, 0.15, 4, 0, 0, 1),
            (10, 11, 10000, 5, 5, 0.15, 4, 0, 0, 1),
            (10, 15, 13512.00155, 6, 6, 0.15, 4, 0, 0, 1),
            (10, 16, 4854.917717, 4, 4, 0.15, 4, 0, 0, 1),
            (10, 17, 4993.510694, 8, 8, 0.15, 4, 0, 0, 1),
            (11, 4, 4908.82673, 6, 6, 0.15, 4, 0, 0, 1),
            (11, 10, 10000, 5, 5, 0.15, 4, 0, 0, 1),
            (11, 12, 4908.82673, 6, 6, 0.15, 4, 0, 0, 1),
            (11, 14, 4876.508287, 4, 4, 0.15, 4, 0, 0, 1),
            (12, 3, 23403.47319, 4, 4, 0.15, 4, 0, 0, 1),
            (12, 11, 4908.82673, 6, 6, 0.15, 4, 0, 0, 1),
            # (12, 13, 25900.20064, 3, 3, 0.15, 4, 0, 0, 1),
            # (13, 12, 25900.20064, 3, 3, 0.15, 4, 0, 0, 1),
            (13, 24, 5091.256152, 4, 4, 0.15, 4, 0, 0, 1),
            (14, 11, 4876.508287, 4, 4, 0.15, 4, 0, 0, 1),
            (14, 15, 5127.526119, 5, 5, 0.15, 4, 0, 0, 1),
            (14, 23, 4924.790605, 4, 4, 0.15, 4, 0, 0, 1),
            (15, 10, 13512.00155, 6, 6, 0.15, 4, 0, 0, 1),
            (15, 14, 5127.526119, 5, 5, 0.15, 4, 0, 0, 1),
            (15, 19, 14564.75315, 3, 3, 0.15, 4, 0, 0, 1),
            # (15, 22, 9599.180565, 3, 3, 0.15, 4, 0, 0, 1),
            (16, 8, 5045.822583, 5, 5, 0.15, 4, 0, 0, 1),
            (16, 10, 4854.917717, 4, 4, 0.15, 4, 0, 0, 1),
            (16, 17, 5229.910063, 2, 2, 0.15, 4, 0, 0, 1),
            (16, 18, 19679.89671, 3, 3, 0.15, 4, 0, 0, 1),
            (17, 10, 4993.510694, 8, 8, 0.15, 4, 0, 0, 1),
            (17, 16, 5229.910063, 2, 2, 0.15, 4, 0, 0, 1),
            (17, 19, 4823.950831, 2, 2, 0.15, 4, 0, 0, 1),
            (18, 7, 23403.47319, 2, 2, 0.15, 4, 0, 0, 1),
            (18, 16, 19679.89671, 3, 3, 0.15, 4, 0, 0, 1),
            (18, 20, 23403.47319, 4, 4, 0.15, 4, 0, 0, 1),
            (19, 15, 14564.75315, 3, 3, 0.15, 4, 0, 0, 1),
            (19, 17, 4823.950831, 2, 2, 0.15, 4, 0, 0, 1),
            (19, 20, 5002.607563, 4, 4, 0.15, 4, 0, 0, 1),
            (20, 18, 23403.47319, 4, 4, 0.15, 4, 0, 0, 1),
            (20, 19, 5002.607563, 4, 4, 0.15, 4, 0, 0, 1),
            (20, 21, 5059.91234, 6, 6, 0.15, 4, 0, 0, 1),
            (20, 22, 5075.697193, 5, 5, 0.15, 4, 0, 0, 1),
            (21, 20, 5059.91234, 6, 6, 0.15, 4, 0, 0, 1),
            (21, 22, 5229.910063, 2, 2, 0.15, 4, 0, 0, 1),
            (21, 24, 4885.357564, 3, 3, 0.15, 4, 0, 0, 1),
            # (22, 15, 9599.180565, 3, 3, 0.15, 4, 0, 0, 1),
            (22, 20, 5075.697193, 5, 5, 0.15, 4, 0, 0, 1),
            (22, 21, 5229.910063, 2, 2, 0.15, 4, 0, 0, 1),
            (22, 23, 5000, 4, 4, 0.15, 4, 0, 0, 1),
            (23, 14, 4924.790605, 4, 4, 0.15, 4, 0, 0, 1),
            (23, 22, 5000, 4, 4, 0.15, 4, 0, 0, 1),
            (23, 24, 5078.508436, 2, 2, 0.15, 4, 0, 0, 1),
            (24, 13, 5091.256152, 4, 4, 0.15, 4, 0, 0, 1),
            (24, 21, 4885.357564, 3, 3, 0.15, 4, 0, 0, 1),
            (24, 23, 5078.508436, 2, 2, 0.15, 4, 0, 0, 1),
        ], dtype=data_type)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For bus
        tsc['node']['node_i'] -= 1
        # For branch
        tsc['edge']['init_node'] -= 1
        tsc['edge']['term_node'] -= 1

        # For node's position for drawing graph in networkx
        # tsc['node_position'] = dict()
        # for node_i, node_x, node_y in tsc['node']:
        #     tsc['node_position'][node_i] = np.array([node_x, node_y])
        # Dictionary comprehension is more concise
        tsc['node_position'] = {node_i: np.array([node_x, node_y])
                                for node_i, node_x, node_y in tsc['node']}

        self.tsc = tsc

        return tsc


    def eastern_massachusetts(self):
        ''' Transportation systems case
        https: // github.com / bstabler / TransportationNetworks
        :return:
        '''

        from numpy import array

        tsc = dict()

        # Transportaton system case
        # node data (??? The coordinates of x, y)
        # data_type = dtype({'names': ('node_i', 'x', 'y'),
        #             'formats': ('i4', 'f8', 'f8')
        #             })
        data_type = dtype([('node_i', 'i4')])
        tsc['node'] = np.arange(74)
        #
        # tsc['node'] = array([
        #     (1, 50000, 510000),
        #     (2, 320000, 510000),
        #     (3, 50000, 440000),
        #     (4, 130000, 440000),
        #     (5, 220000, 440000),
        #     (6, 320000, 440000),
        #     (7, 420000, 380000),
        #     (8, 320000, 380000),
        #     (9, 220000, 380000),
        #     (10, 220000, 320000),
        #     (11, 130000, 320000),
        #     (12, 50000, 320000),
        #     (13, 50000, 50000),
        #     (14, 130000, 190000),
        #     (15, 220000, 190000),
        #     (16, 320000, 320000),
        #     (17, 320000, 260000),
        #     (18, 420000, 320000),
        #     (19, 320000, 190000),
        #     (20, 320000, 50000),
        #     (21, 220000, 50000),
        #     (22, 220000, 130000),
        #     (23, 130000, 130000),
        #     (24, 130000, 50000),
        # ], dtype=data_type)

        # Init node Term node 	Capacity 	Length 	Free Flow Time 	B	Power
        # Speed limit 	Toll 	Type	;
        # INIT_NODE = 0
        # TERM_NODE = 1
        data_type = dtype({'names': ('init_node', 'term_node', 'capacity', 'length',
                               'free_flow_time', 'b', 'power', 'speed_limit',
                               'toll', 'type'),
                    'formats': ('i4', 'i4', 'f8', 'f8', 'f8', 'f8', 'f8', 'f8',
                                'f8', 'i4')
                    })
        tsc['edge'] = array([
            (1,  3,  4938.061313,  16.106817,  0.238965,  0.15,  4,  0.000000,  0.000000,  0),
            (3,  1,  5254.128510,  16.057131,  0.240297,  0.15,  4,  0.000000,  0.000000,  0),
            (1,  7,  7309.824721,  16.058740,  0.222813,  0.15,  4,  0.000000,  0.000000,  0),
            (7,  1,  7388.626964,  15.865263,  0.218902,  0.15,  4,  0.000000,  0.000000,  0),
            (1,  9,  1164.374840,  17.455401,  0.402046,  0.15,  4,  0.000000,  0.000000,  0),
            (9,  1,  1076.221509,  17.450099,  0.403219,  0.15,  4,  0.000000,  0.000000,  0),
            (2,  3,  885.069883,  3.874725,  0.106992,  0.15,  4,  0.000000,  0.000000,  0),
            (3,  2,  879.337660,  3.975121,  0.108032,  0.15,  4,  0.000000,  0.000000,  0),
            (3,  6,  5963.515309,  7.587822,  0.109499,  0.15,  4,  0.000000,  0.000000,  0),
            (6,  3,  6000.000000,  7.447450,  0.107665,  0.15,  4,  0.000000,  0.000000,  0),
            (3,  7,  870.143949,  11.592971,  0.349058,  0.15,  4,  0.000000,  0.000000,  0),
            (7,  3,  987.279904,  11.736039,  0.346955,  0.15,  4,  0.000000,  0.000000,  0),
            (4,  6,  1397.463467,  3.509127,  0.153312,  0.15,  4,  0.000000,  0.000000,  0),
            (6,  4,  1032.232650,  3.509127,  0.151643,  0.15,  4,  0.000000,  0.000000,  0),
            (4,  8,  6680.104456,  6.269461,  0.089394,  0.15,  4,  0.000000,  0.000000,  0),
            (8,  4,  6223.710971,  6.412615,  0.090973,  0.15,  4,  0.000000,  0.000000,  0),
            (5,  10,  3970.233407,  10.449604,  0.151020,  0.15,  4,  0.000000,  0.000000,  0),
            (10,  5,  3954.624913,  10.554494,  0.148699,  0.15,  4,  0.000000,  0.000000,  0),
            (5,  11,  934.463935,  11.677805,  0.382470,  0.15,  4,  0.000000,  0.000000,  0),
            (11,  5,  882.819848,  11.588228,  0.374745,  0.15,  4,  0.000000,  0.000000,  0),
            (6,  8,  6000.000000,  2.959879,  0.043012,  0.15,  4,  0.000000,  0.000000,  0),
            (8,  6,  6000.000000,  2.647408,  0.038664,  0.15,  4,  0.000000,  0.000000,  0),
            (6,  13,  2232.228547,  11.650116,  0.283196,  0.15,  4,  0.000000,  0.000000,  0),
            (13,  6,  1834.137753,  11.522613,  0.279406,  0.15,  4,  0.000000,  0.000000,  0),
            (6,  17,  1370.884143,  12.288557,  0.364887,  0.15,  4,  0.000000,  0.000000,  0),
            (17,  6,  1245.949960,  12.326099,  0.361371,  0.15,  4,  0.000000,  0.000000,  0),
            (7,  9,  827.932876,  4.074788,  0.105565,  0.15,  4,  0.000000,  0.000000,  0),
            (9,  7,  825.000000,  4.074788,  0.104603,  0.15,  4,  0.000000,  0.000000,  0),
            (7,  13,  5919.941039,  6.485868,  0.088559,  0.15,  4,  0.000000,  0.000000,  0),
            (13,  7,  8000.000000,  6.868068,  0.092749,  0.15,  4,  0.000000,  0.000000,  0),
            (8,  11,  6000.000000,  5.919129,  0.085073,  0.15,  4,  0.000000,  0.000000,  0),
            (11,  8,  6000.000000,  5.949186,  0.085183,  0.15,  4,  0.000000,  0.000000,  0),
            (8,  16,  6441.701930,  12.635124,  0.177718,  0.15,  4,  0.000000,  0.000000,  0),
            (16,  8,  4445.015010,  12.545210,  0.176796,  0.15,  4,  0.000000,  0.000000,  0),
            (9,  12,  973.892640,  5.229189,  0.143440,  0.15,  4,  0.000000,  0.000000,  0),
            (12,  9,  970.976785,  5.395143,  0.142648,  0.15,  4,  0.000000,  0.000000,  0),
            (9,  13,  875.000000,  2.987829,  0.064058,  0.15,  4,  0.000000,  0.000000,  0),
            (13,  9,  875.000000,  3.036319,  0.065090,  0.15,  4,  0.000000,  0.000000,  0),
            (10,  11,  8000.000000,  1.839467,  0.026278,  0.15,  4,  0.000000,  0.000000,  0),
            (11,  10,  8000.000000,  1.804264,  0.026149,  0.15,  4,  0.000000,  0.000000,  0),
            (10,  18,  3900.000000,  10.528474,  0.151084,  0.15,  4,  0.000000,  0.000000,  0),
            (18,  10,  2913.625342,  10.484211,  0.149754,  0.15,  4,  0.000000,  0.000000,  0),
            (10,  20,  5719.303943,  11.754735,  0.166898,  0.15,  4,  0.000000,  0.000000,  0),
            (20,  10,  6009.002354,  11.782103,  0.169507,  0.15,  4,  0.000000,  0.000000,  0),
            (11,  19,  1124.407633,  12.511216,  0.375603,  0.15,  4,  0.000000,  0.000000,  0),
            (19,  11,  1617.706447,  12.212523,  0.372797,  0.15,  4,  0.000000,  0.000000,  0),
            (13,  14,  4394.231889,  8.285083,  0.135662,  0.15,  4,  0.000000,  0.000000,  0),
            (14,  13,  4320.225018,  7.525413,  0.125066,  0.15,  4,  0.000000,  0.000000,  0),
            (13,  15,  1910.935331,  8.419362,  0.285875,  0.15,  4,  0.000000,  0.000000,  0),
            (15,  13,  2863.541072,  8.467007,  0.296532,  0.15,  4,  0.000000,  0.000000,  0),
            (14,  17,  5946.288757,  6.761203,  0.101234,  0.15,  4,  0.000000,  0.000000,  0),
            (17,  14,  4904.241929,  6.898849,  0.105394,  0.15,  4,  0.000000,  0.000000,  0),
            (14,  22,  2840.485893,  8.568056,  0.152652,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  14,  2895.846620,  8.369572,  0.146429,  0.15,  4,  0.000000,  0.000000,  0),
            (16,  17,  6321.013829,  1.349797,  0.021253,  0.15,  4,  0.000000,  0.000000,  0),
            (17,  16,  4209.453790,  1.357842,  0.022086,  0.15,  4,  0.000000,  0.000000,  0),
            (16,  19,  6703.328686,  4.582719,  0.068955,  0.15,  4,  0.000000,  0.000000,  0),
            (19,  16,  7034.073767,  4.452518,  0.069246,  0.15,  4,  0.000000,  0.000000,  0),
            (16,  22,  4469.882549,  3.367288,  0.048602,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  16,  7627.741159,  3.429105,  0.048681,  0.15,  4,  0.000000,  0.000000,  0),
            (17,  22,  1886.210086,  5.321009,  0.173992,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  17,  1884.190009,  5.315025,  0.167390,  0.15,  4,  0.000000,  0.000000,  0),
            (18,  19,  6192.450268,  2.349796,  0.035226,  0.15,  4,  0.000000,  0.000000,  0),
            (19,  18,  6293.127608,  3.548771,  0.055958,  0.15,  4,  0.000000,  0.000000,  0),
            (18,  21,  8000.000000,  5.453573,  0.079145,  0.15,  4,  0.000000,  0.000000,  0),
            (21,  18,  5449.818119,  5.457316,  0.079639,  0.15,  4,  0.000000,  0.000000,  0),
            (19,  22,  2023.075785,  5.818844,  0.181953,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  19,  1606.326133,  5.791542,  0.177751,  0.15,  4,  0.000000,  0.000000,  0),
            (20,  21,  2644.724412,  16.461817,  0.298718,  0.15,  4,  0.000000,  0.000000,  0),
            (21,  20,  2416.390697,  15.442909,  0.280603,  0.15,  4,  0.000000,  0.000000,  0),
            (20,  30,  6000.000000,  13.283225,  0.185326,  0.15,  4,  0.000000,  0.000000,  0),
            (30,  20,  6000.000000,  13.295710,  0.187372,  0.15,  4,  0.000000,  0.000000,  0),
            (20,  58,  2479.370349,  12.263938,  0.187847,  0.15,  4,  0.000000,  0.000000,  0),
            (58,  20,  2630.412693,  12.556028,  0.190582,  0.15,  4,  0.000000,  0.000000,  0),
            (21,  22,  4493.711985,  6.798869,  0.105465,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  21,  4495.928831,  6.721773,  0.104238,  0.15,  4,  0.000000,  0.000000,  0),
            (21,  23,  8000.000000,  4.525775,  0.066967,  0.15,  4,  0.000000,  0.000000,  0),
            (23,  21,  8000.000000,  4.543421,  0.066174,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  23,  877.861868,  4.583763,  0.178312,  0.15,  4,  0.000000,  0.000000,  0),
            (23,  22,  960.167030,  4.508858,  0.178258,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  25,  2853.104660,  8.906273,  0.209962,  0.15,  4,  0.000000,  0.000000,  0),
            (25,  22,  1506.692042,  8.306624,  0.190037,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  28,  2080.186891,  8.608119,  0.259227,  0.15,  4,  0.000000,  0.000000,  0),
            (28,  22,  2102.073051,  8.599900,  0.257355,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  29,  5879.862476,  5.869561,  0.096405,  0.15,  4,  0.000000,  0.000000,  0),
            (29,  22,  1423.685694,  5.650089,  0.093035,  0.15,  4,  0.000000,  0.000000,  0),
            (22,  40,  2210.802571,  12.222220,  0.456892,  0.15,  4,  0.000000,  0.000000,  0),
            (40,  22,  1664.447067,  11.916418,  0.446617,  0.15,  4,  0.000000,  0.000000,  0),
            (23,  24,  8000.000000,  2.436260,  0.036689,  0.15,  4,  0.000000,  0.000000,  0),
            (24,  23,  8000.000000,  2.403902,  0.035789,  0.15,  4,  0.000000,  0.000000,  0),
            (23,  31,  1139.317496,  16.652993,  0.458553,  0.15,  4,  0.000000,  0.000000,  0),
            (31,  23,  904.280899,  16.799920,  0.466823,  0.15,  4,  0.000000,  0.000000,  0),
            (24,  25,  4500.000000,  1.687604,  0.026787,  0.15,  4,  0.000000,  0.000000,  0),
            (25,  24,  3600.000000,  1.678461,  0.026642,  0.15,  4,  0.000000,  0.000000,  0),
            (24,  26,  7980.289310,  1.645865,  0.023691,  0.15,  4,  0.000000,  0.000000,  0),
            (26,  24,  8000.000000,  1.061605,  0.015691,  0.15,  4,  0.000000,  0.000000,  0),
            (24,  33,  3559.213894,  11.986122,  0.171367,  0.15,  4,  0.000000,  0.000000,  0),
            (33,  24,  5555.608069,  11.945303,  0.172950,  0.15,  4,  0.000000,  0.000000,  0),
            (25,  26,  1750.000000,  1.928320,  0.060308,  0.15,  4,  0.000000,  0.000000,  0),
            (26,  25,  2372.861722,  1.812974,  0.056615,  0.15,  4,  0.000000,  0.000000,  0),
            (26,  27,  1316.906179,  1.569673,  0.050181,  0.15,  4,  0.000000,  0.000000,  0),
            (27,  26,  985.369469,  1.572847,  0.050573,  0.15,  4,  0.000000,  0.000000,  0),
            (26,  28,  7731.459177,  1.792193,  0.027124,  0.15,  4,  0.000000,  0.000000,  0),
            (28,  26,  8332.485651,  1.545397,  0.023266,  0.15,  4,  0.000000,  0.000000,  0),
            (27,  28,  2020.835188,  2.382525,  0.049480,  0.15,  4,  0.000000,  0.000000,  0),
            (28,  27,  1906.378666,  2.307315,  0.048994,  0.15,  4,  0.000000,  0.000000,  0),
            (27,  33,  2656.304461,  10.419637,  0.227875,  0.15,  4,  0.000000,  0.000000,  0),
            (33,  27,  2787.223131,  10.605612,  0.238906,  0.15,  4,  0.000000,  0.000000,  0),
            (27,  35,  1139.332695,  17.006678,  0.461083,  0.15,  4,  0.000000,  0.000000,  0),
            (35,  27,  1388.367239,  17.005568,  0.464692,  0.15,  4,  0.000000,  0.000000,  0),
            (28,  37,  6458.755608,  7.738237,  0.116163,  0.15,  4,  0.000000,  0.000000,  0),
            (37,  28,  7118.104798,  8.018881,  0.122455,  0.15,  4,  0.000000,  0.000000,  0),
            (29,  41,  4266.616474,  4.915497,  0.078876,  0.15,  4,  0.000000,  0.000000,  0),
            (41,  29,  6304.110442,  5.233682,  0.084891,  0.15,  4,  0.000000,  0.000000,  0),
            (29,  49,  1060.253828,  32.389346,  0.862656,  0.15,  4,  0.000000,  0.000000,  0),
            (49,  29,  1117.781868,  32.299122,  0.877102,  0.15,  4,  0.000000,  0.000000,  0),
            (30,  31,  6000.000000,  2.321757,  0.032359,  0.15,  4,  0.000000,  0.000000,  0),
            (31,  30,  6000.000000,  2.266330,  0.032998,  0.15,  4,  0.000000,  0.000000,  0),
            (30,  60,  4882.896652,  7.996646,  0.114214,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  30,  4803.175011,  8.006117,  0.117691,  0.15,  4,  0.000000,  0.000000,  0),
            (31,  32,  6000.000000,  4.247237,  0.060154,  0.15,  4,  0.000000,  0.000000,  0),
            (32,  31,  5459.290242,  4.232368,  0.060355,  0.15,  4,  0.000000,  0.000000,  0),
            (31,  60,  965.579981,  6.729821,  0.176349,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  31,  1055.139505,  6.734278,  0.179319,  0.15,  4,  0.000000,  0.000000,  0),
            (32,  33,  2423.744805,  4.981080,  0.096065,  0.15,  4,  0.000000,  0.000000,  0),
            (33,  32,  2621.675199,  4.952494,  0.098353,  0.15,  4,  0.000000,  0.000000,  0),
            (32,  34,  2987.327149,  1.806379,  0.026445,  0.15,  4,  0.000000,  0.000000,  0),
            (34,  32,  4790.345753,  1.888502,  0.026979,  0.15,  4,  0.000000,  0.000000,  0),
            (32,  60,  2599.322451,  5.513571,  0.111140,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  32,  2614.736215,  5.443441,  0.108607,  0.15,  4,  0.000000,  0.000000,  0),
            (33,  34,  5444.285031,  4.951073,  0.067686,  0.15,  4,  0.000000,  0.000000,  0),
            (34,  33,  5400.000000,  4.890894,  0.067929,  0.15,  4,  0.000000,  0.000000,  0),
            (34,  35,  5470.884476,  9.338509,  0.130360,  0.15,  4,  0.000000,  0.000000,  0),
            (35,  34,  6000.000000,  9.213129,  0.129099,  0.15,  4,  0.000000,  0.000000,  0),
            (34,  60,  5898.700106,  10.077606,  0.140899,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  34,  5784.050030,  14.807024,  0.207543,  0.15,  4,  0.000000,  0.000000,  0),
            (35,  36,  5276.538355,  6.580945,  0.092530,  0.15,  4,  0.000000,  0.000000,  0),
            (36,  35,  6000.000000,  6.854679,  0.096513,  0.15,  4,  0.000000,  0.000000,  0),
            (35,  71,  1957.382228,  3.665728,  0.119188,  0.15,  4,  0.000000,  0.000000,  0),
            (71,  35,  1576.243145,  3.666941,  0.120317,  0.15,  4,  0.000000,  0.000000,  0),
            (36,  43,  875.000000,  8.551889,  0.236940,  0.15,  4,  0.000000,  0.000000,  0),
            (43,  36,  875.000000,  8.474892,  0.227668,  0.15,  4,  0.000000,  0.000000,  0),
            (36,  44,  6000.000000,  8.148498,  0.113432,  0.15,  4,  0.000000,  0.000000,  0),
            (44,  36,  5867.300085,  7.709684,  0.107280,  0.15,  4,  0.000000,  0.000000,  0),
            (36,  71,  1058.124261,  7.348533,  0.205470,  0.15,  4,  0.000000,  0.000000,  0),
            (71,  36,  1017.341605,  7.337551,  0.203815,  0.15,  4,  0.000000,  0.000000,  0),
            (37,  38,  5815.725402,  3.188718,  0.047781,  0.15,  4,  0.000000,  0.000000,  0),
            (38,  37,  5772.233647,  3.529509,  0.054144,  0.15,  4,  0.000000,  0.000000,  0),
            (37,  42,  1816.106654,  7.634186,  0.169636,  0.15,  4,  0.000000,  0.000000,  0),
            (42,  37,  1809.167052,  7.710594,  0.172289,  0.15,  4,  0.000000,  0.000000,  0),
            (38,  39,  5733.056963,  3.167668,  0.049260,  0.15,  4,  0.000000,  0.000000,  0),
            (39,  38,  6422.206060,  3.103793,  0.048731,  0.15,  4,  0.000000,  0.000000,  0),
            (38,  42,  6000.000000,  6.153280,  0.086214,  0.15,  4,  0.000000,  0.000000,  0),
            (42,  38,  5747.695049,  6.951621,  0.101052,  0.15,  4,  0.000000,  0.000000,  0),
            (39,  40,  7532.420303,  1.292279,  0.018762,  0.15,  4,  0.000000,  0.000000,  0),
            (40,  39,  8352.013267,  1.307139,  0.019853,  0.15,  4,  0.000000,  0.000000,  0),
            (39,  48,  4371.132753,  17.539958,  0.245609,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  39,  5233.501727,  18.147037,  0.255123,  0.15,  4,  0.000000,  0.000000,  0),
            (40,  41,  6101.889600,  3.486548,  0.052977,  0.15,  4,  0.000000,  0.000000,  0),
            (41,  40,  6005.599197,  3.224867,  0.049483,  0.15,  4,  0.000000,  0.000000,  0),
            (40,  48,  1003.245496,  21.899350,  0.624606,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  40,  1688.727995,  21.947445,  0.646177,  0.15,  4,  0.000000,  0.000000,  0),
            (41,  49,  2188.676850,  32.819901,  0.573397,  0.15,  4,  0.000000,  0.000000,  0),
            (49,  41,  2459.636780,  32.924690,  0.583100,  0.15,  4,  0.000000,  0.000000,  0),
            (42,  43,  1518.910867,  3.965880,  0.082974,  0.15,  4,  0.000000,  0.000000,  0),
            (43,  42,  1921.767308,  3.971168,  0.086944,  0.15,  4,  0.000000,  0.000000,  0),
            (42,  45,  6000.000000,  6.062719,  0.084105,  0.15,  4,  0.000000,  0.000000,  0),
            (45,  42,  6000.000000,  6.256131,  0.087310,  0.15,  4,  0.000000,  0.000000,  0),
            (43,  44,  1750.000000,  3.491125,  0.065806,  0.15,  4,  0.000000,  0.000000,  0),
            (44,  43,  1763.712840,  3.564476,  0.068433,  0.15,  4,  0.000000,  0.000000,  0),
            (43,  45,  1828.679811,  4.080103,  0.107891,  0.15,  4,  0.000000,  0.000000,  0),
            (45,  43,  1213.743460,  4.141357,  0.108835,  0.15,  4,  0.000000,  0.000000,  0),
            (44,  46,  6000.000000,  3.243509,  0.045602,  0.15,  4,  0.000000,  0.000000,  0),
            (46,  44,  6000.000000,  3.245762,  0.045613,  0.15,  4,  0.000000,  0.000000,  0),
            (44,  54,  1745.164116,  10.076888,  0.262186,  0.15,  4,  0.000000,  0.000000,  0),
            (54,  44,  1860.992488,  10.014430,  0.262637,  0.15,  4,  0.000000,  0.000000,  0),
            (45,  46,  6000.000000,  1.889485,  0.026912,  0.15,  4,  0.000000,  0.000000,  0),
            (46,  45,  4768.359065,  1.960857,  0.027521,  0.15,  4,  0.000000,  0.000000,  0),
            (45,  47,  2462.627044,  3.422107,  0.076107,  0.15,  4,  0.000000,  0.000000,  0),
            (47,  45,  2262.705882,  3.687148,  0.081303,  0.15,  4,  0.000000,  0.000000,  0),
            (46,  47,  6000.000000,  2.860027,  0.040511,  0.15,  4,  0.000000,  0.000000,  0),
            (47,  46,  4074.530263,  2.870560,  0.040089,  0.15,  4,  0.000000,  0.000000,  0),
            (46,  54,  5972.591129,  11.279298,  0.157395,  0.15,  4,  0.000000,  0.000000,  0),
            (54,  46,  5779.651242,  11.207469,  0.153831,  0.15,  4,  0.000000,  0.000000,  0),
            (47,  48,  1285.011529,  10.530470,  0.274471,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  47,  825.000000,  10.299169,  0.269385,  0.15,  4,  0.000000,  0.000000,  0),
            (47,  74,  6000.000000,  5.726137,  0.078440,  0.15,  4,  0.000000,  0.000000,  0),
            (74,  47,  3317.446565,  5.749452,  0.079733,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  49,  2121.019835,  14.622122,  0.246443,  0.15,  4,  0.000000,  0.000000,  0),
            (49,  48,  2063.929153,  14.619950,  0.244123,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  51,  2121.346035,  29.323021,  0.575118,  0.15,  4,  0.000000,  0.000000,  0),
            (51,  48,  2173.005205,  29.502822,  0.570832,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  52,  1884.440173,  16.882700,  0.238143,  0.15,  4,  0.000000,  0.000000,  0),
            (52,  48,  2415.093648,  17.008577,  0.240483,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  53,  2164.620818,  14.062639,  0.201959,  0.15,  4,  0.000000,  0.000000,  0),
            (53,  48,  2000.000000,  14.187330,  0.204566,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  54,  1893.169265,  15.006140,  0.355088,  0.15,  4,  0.000000,  0.000000,  0),
            (54,  48,  1755.928729,  15.083883,  0.361317,  0.15,  4,  0.000000,  0.000000,  0),
            (48,  74,  6000.000000,  8.050591,  0.111477,  0.15,  4,  0.000000,  0.000000,  0),
            (74,  48,  6000.000000,  7.025985,  0.097934,  0.15,  4,  0.000000,  0.000000,  0),
            (49,  50,  2664.129248,  13.039072,  0.187173,  0.15,  4,  0.000000,  0.000000,  0),
            (50,  49,  2928.314458,  13.189106,  0.188388,  0.15,  4,  0.000000,  0.000000,  0),
            (49,  73,  825.846988,  8.533461,  0.249452,  0.15,  4,  0.000000,  0.000000,  0),
            (73,  49,  825.000000,  8.539432,  0.253689,  0.15,  4,  0.000000,  0.000000,  0),
            (50,  51,  2000.000000,  15.449374,  0.288628,  0.15,  4,  0.000000,  0.000000,  0),
            (51,  50,  2000.000000,  16.020354,  0.294092,  0.15,  4,  0.000000,  0.000000,  0),
            (50,  73,  825.000000,  8.473072,  0.211827,  0.15,  4,  0.000000,  0.000000,  0),
            (73,  50,  825.000000,  8.473072,  0.211827,  0.15,  4,  0.000000,  0.000000,  0),
            (51,  52,  2000.000000,  14.949057,  0.213478,  0.15,  4,  0.000000,  0.000000,  0),
            (52,  51,  2000.000000,  14.931071,  0.212050,  0.15,  4,  0.000000,  0.000000,  0),
            (52,  53,  2000.000000,  8.710908,  0.124295,  0.15,  4,  0.000000,  0.000000,  0),
            (53,  52,  2000.000000,  8.791252,  0.124731,  0.15,  4,  0.000000,  0.000000,  0),
            (53,  54,  2000.000000,  13.929966,  0.200888,  0.15,  4,  0.000000,  0.000000,  0),
            (54,  53,  2000.000000,  13.938593,  0.204645,  0.15,  4,  0.000000,  0.000000,  0),
            (55,  57,  2000.000000,  9.342478,  0.187275,  0.15,  4,  0.000000,  0.000000,  0),
            (57,  55,  2000.000000,  9.139465,  0.183314,  0.15,  4,  0.000000,  0.000000,  0),
            (56,  57,  2000.000000,  10.255872,  0.158886,  0.15,  4,  0.000000,  0.000000,  0),
            (57,  56,  2000.000000,  10.442469,  0.162691,  0.15,  4,  0.000000,  0.000000,  0),
            (57,  58,  2000.000000,  10.358965,  0.162372,  0.15,  4,  0.000000,  0.000000,  0),
            (58,  57,  2000.000000,  10.189568,  0.157897,  0.15,  4,  0.000000,  0.000000,  0),
            (57,  59,  2000.000000,  11.360160,  0.266545,  0.15,  4,  0.000000,  0.000000,  0),
            (59,  57,  2000.000000,  11.354891,  0.263774,  0.15,  4,  0.000000,  0.000000,  0),
            (58,  59,  2000.000000,  9.144294,  0.130570,  0.15,  4,  0.000000,  0.000000,  0),
            (59,  58,  2000.000000,  9.303475,  0.135526,  0.15,  4,  0.000000,  0.000000,  0),
            (59,  60,  2000.000000,  8.141116,  0.118980,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  59,  2000.000000,  8.495865,  0.124498,  0.15,  4,  0.000000,  0.000000,  0),
            (59,  72,  2000.000000,  3.113282,  0.080857,  0.15,  4,  0.000000,  0.000000,  0),
            (72,  59,  2000.000000,  3.106375,  0.081947,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  61,  2000.000000,  24.836979,  0.649394,  0.15,  4,  0.000000,  0.000000,  0),
            (61,  60,  2000.000000,  24.834966,  0.649959,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  63,  2000.000000,  9.667444,  0.135342,  0.15,  4,  0.000000,  0.000000,  0),
            (63,  60,  2000.000000,  9.769817,  0.138670,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  65,  2000.000000,  11.630476,  0.244542,  0.15,  4,  0.000000,  0.000000,  0),
            (65,  60,  2000.000000,  11.588988,  0.240716,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  67,  2000.000000,  8.630658,  0.126147,  0.15,  4,  0.000000,  0.000000,  0),
            (67,  60,  2000.000000,  8.971461,  0.130509,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  69,  2075.828365,  12.157808,  0.192359,  0.15,  4,  0.000000,  0.000000,  0),
            (69,  60,  2333.427091,  11.789682,  0.183140,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  71,  1400.478511,  12.851941,  0.339724,  0.15,  4,  0.000000,  0.000000,  0),
            (71,  60,  1400.154626,  12.851941,  0.337390,  0.15,  4,  0.000000,  0.000000,  0),
            (60,  72,  2000.000000,  4.619147,  0.112396,  0.15,  4,  0.000000,  0.000000,  0),
            (72,  60,  2000.000000,  4.619147,  0.109156,  0.15,  4,  0.000000,  0.000000,  0),
            (62,  63,  2000.000000,  3.711357,  0.052273,  0.15,  4,  0.000000,  0.000000,  0),
            (63,  62,  2000.000000,  4.075201,  0.058217,  0.15,  4,  0.000000,  0.000000,  0),
            (63,  65,  2000.000000,  1.377317,  0.026395,  0.15,  4,  0.000000,  0.000000,  0),
            (65,  63,  2000.000000,  1.512241,  0.028621,  0.15,  4,  0.000000,  0.000000,  0),
            (64,  65,  2000.000000,  3.254047,  0.082705,  0.15,  4,  0.000000,  0.000000,  0),
            (65,  64,  2000.000000,  3.077846,  0.084120,  0.15,  4,  0.000000,  0.000000,  0),
            (65,  66,  2000.000000,  6.352585,  0.088355,  0.15,  4,  0.000000,  0.000000,  0),
            (66,  65,  2000.000000,  6.913756,  0.096311,  0.15,  4,  0.000000,  0.000000,  0),
            (67,  68,  2000.000000,  2.647231,  0.039206,  0.15,  4,  0.000000,  0.000000,  0),
            (68,  67,  2000.000000,  2.867757,  0.041562,  0.15,  4,  0.000000,  0.000000,  0),
            (67,  69,  2000.000000,  11.765242,  0.279353,  0.15,  4,  0.000000,  0.000000,  0),
            (69,  67,  2000.000000,  11.765242,  0.281204,  0.15,  4,  0.000000,  0.000000,  0),
            (69,  70,  3179.348082,  5.334022,  0.077249,  0.15,  4,  0.000000,  0.000000,  0),
            (70,  69,  2919.745558,  5.893052,  0.082871,  0.15,  4,  0.000000,  0.000000,  0),
            (69,  71,  875.000000,  8.992124,  0.231590,  0.15,  4,  0.000000,  0.000000,  0),
            (71,  69,  1145.206340,  8.985699,  0.236104,  0.15,  4,  0.000000,  0.000000,  0)
        ], dtype=data_type)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For bus
        # tsc['node']['node_i'] -= 1
        # For branch
        tsc['edge']['init_node'] -= 1
        tsc['edge']['term_node'] -= 1

        # For node's position for drawing graph in networkx
        # tsc['node_position'] = dict()
        # for node_i, node_x, node_y in tsc['node']:
        #     tsc['node_position'][node_i] = np.array([node_x, node_y])
        # Dictionary comprehension is more concise
        # tsc['node_position'] = {node_i: np.array([node_x, node_y])
        #                         for node_i, node_x, node_y in tsc['node']}

        self.tsc = tsc

        return tsc

    def sscase(self):
        '''

        :return:
        '''

        from numpy import array, dtype

        ssc = {}

        # microgrid information
        data_type = dtype({'names': ('station_type', 'bus_i', 'node_i', 'max_p_mw',
                            'min_p_mw', 'max_q_mvar', 'min_q_mvar', 'cap_e_mwh',
                            'min_r_mwh', 'cost_$/mwh', 'pload_mw', 'qload_mvar',
                            'load_type'),
                   'formats': ('U16', 'i4', 'i4', 'f8',
                               'f8', 'f8', 'f8', 'f8',
                               'f8', 'f8', 'f8', 'f8',
                               'U16')
                   })

        ssc['station'] = array([
            ('microgrid', 14, 2, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'commercial'),
            ('depot', -1, 8, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                        'no_load'),
            # ('depot', -1, 2, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
            #                                                             'no_load'),
            # ('microgrid', 21, 11, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
            #                                                        'residential'),
            # ('microgrid', 25, 15, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
            #                                                         'industrial'),
            ('microgrid', 47, 3, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'residential'),
            ('microgrid', 80, 17, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'industrial'),
            ('microgrid', 113, 24, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'industrial')
        ], dtype=data_type)

        # Only for reinforcement leraning single 33-bus test system
        # ssc['station'] = array([
        #     ('microgrid', 14, 2, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'commercial'),
        #     ('depot', -1, 8, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'no_load'),
        #     # ('depot', -1, 2, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
        #     #                                                             'no_load'),
        #     # ('microgrid', 21, 11, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
        #     #                                                        'residential'),
        #     # ('microgrid', 25, 15, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
        #     #                                                         'industrial'),
        #     ('microgrid', 16, 3, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'residential'),
        #     ('microgrid', 18, 17, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'industrial'),
        #     ('microgrid', 31, 24, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'industrial')
        # ], dtype=data_type)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For location
        # It cannot operate ['bus_i', 'node_i'] at the same time
        ssc['station']['bus_i'] -= 1
        ssc['station']['node_i'] -= 1

        return ssc

    def sscase_large(self):
        '''

        :return:
        '''

        from numpy import array, dtype

        ssc = {}

        # microgrid information
        data_type = dtype({'names': ('station_type', 'bus_i', 'node_i', 'max_p_mw',
                            'min_p_mw', 'max_q_mvar', 'min_q_mvar', 'cap_e_mwh',
                            'min_r_mwh', 'cost_$/mwh', 'pload_mw', 'qload_mvar',
                            'load_type'),
                   'formats': ('U16', 'i4', 'i4', 'f8',
                               'f8', 'f8', 'f8', 'f8',
                               'f8', 'f8', 'f8', 'f8',
                               'U16')
                   })

        ssc['station'] = array([
            ('depot', -1, 10, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                        'no_load'),
            ('depot', -1, 53, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                        'no_load'),
            ('microgrid', 14, 2, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                        'commercial'),
            # ('depot', -1, 2, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
            #                                                             'no_load'),
            # ('microgrid', 21, 11, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
            #                                                        'residential'),
            # ('microgrid', 25, 15, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
            #                                                         'industrial'),
            ('microgrid', 47, 17, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'residential'),
            ('microgrid', 80, 29, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'industrial'),
            ('microgrid', 113, 32, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'commercial'),
            ('microgrid', 146, 48, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'industrial'),
            ('microgrid', 179, 54, 1.600, 0, 1.200, -1.200, 23.040, 2.304, 500, 0.500, 0.300,
                                                                    'industrial'),
        ], dtype=data_type)

        # Only for reinforcement leraning single 33-bus test system
        # ssc['station'] = array([
        #     ('microgrid', 14, 2, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'commercial'),
        #     ('depot', -1, 8, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'no_load'),
        #     # ('depot', -1, 2, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
        #     #                                                             'no_load'),
        #     # ('microgrid', 21, 11, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
        #     #                                                        'residential'),
        #     # ('microgrid', 25, 15, 1600, 0, 1600, -1600, 23040, 2304, 0.5, 500, 300,
        #     #                                                         'industrial'),
        #     ('microgrid', 16, 3, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'residential'),
        #     ('microgrid', 18, 17, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'industrial'),
        #     ('microgrid', 31, 24, 1600, 0, 1200, -1200, 23040, 2304, 0.5, 500, 300,
        #      'industrial')
        # ], dtype=data_type)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For location
        # It cannot operate ['bus_i', 'node_i'] at the same time
        ssc['station']['bus_i'] -= 1
        ssc['station']['node_i'] -= 1

        return ssc

    def tesscase(self):

        tessc = {}

        # tess information
        data_type = dtype({'names': ('init_location', 'ch_p_mw',
                            'dch_p_mw', 'cap_e_mwh',
                            'init_soc', 'max_soc', 'min_soc', 'ch_efficiency',
                            'dch_efficiency', 'avg_v_km/h',
                            'cost_power', 'cost_transportation'),
                   'formats': ('i4', 'f8', 'f8', 'f8',
                               'f8', 'f8', 'f8', 'f8',
                               'f8', 'f8', 'f8', 'f8')
                   })

        tessc['tess'] = array([
            (8, 0.500, 0.500, 2.000, 0.5, 0.9, 0.1, 0.95, 0.95, 20, 200, 80),
            (8, 0.500, 0.500, 2.000, 0.5, 0.9, 0.1, 0.95, 0.95, 30, 200, 80),
            (8, 0.500, 0.500, 2.000, 0.5, 0.9, 0.1, 0.95, 0.95, 40, 200, 80),
            # (8, 200, 200, 1000, 0.5, 0.9, 0.1, 0.95, 0.95, 15, 0.20, 80),
        ], dtype=data_type)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For initial location
        tessc['tess']['init_location'] -= 1

        # To check if the tess is initially parked at a depot
        ssc = self.sscase()
        # tess's initial location
        tess_initial_location = tessc['tess']['init_location']
        # tess's initial location
        # selection in structure array
        depot_location = ssc['station'][
            ssc['station']['station_type'] == 'depot']['node_i']

        if not set(tess_initial_location).issubset(depot_location):
            raise Exception('tess is not initially at depot, please double check')

        return tessc

    def tesscase_large(self):

        tessc = {}

        # tess information
        data_type = dtype({'names': ('init_location', 'ch_p_mw',
                            'dch_p_mw', 'cap_e_mwh',
                            'init_soc', 'max_soc', 'min_soc', 'ch_efficiency',
                            'dch_efficiency', 'avg_v_km/h',
                            'cost_power', 'cost_transportation'),
                   'formats': ('i4', 'f8', 'f8', 'f8',
                               'f8', 'f8', 'f8', 'f8',
                               'f8', 'f8', 'f8', 'f8')
                   })

        tessc['tess'] = array([
            (10, 0.500, 0.500, 2.000, 0.5, 0.9, 0.1, 0.95, 0.95, 20, 200, 80),
            (10, 0.500, 0.500, 2.000, 0.5, 0.9, 0.1, 0.95, 0.95, 30, 200, 80),
            (10, 0.500, 0.500, 2.000, 0.5, 0.9, 0.1, 0.95, 0.95, 40, 200, 80),
            # (8, 200, 200, 1000, 0.5, 0.9, 0.1, 0.95, 0.95, 15, 0.20, 80),
        ], dtype=data_type)

        # Index conversion to zero-base, if input of bus ID is one-based
        # For initial location
        tessc['tess']['init_location'] -= 1

        # To check if the tess is initially parked at a depot
        ssc = self.sscase_large()
        # tess's initial location
        tess_initial_location = tessc['tess']['init_location']
        # tess's initial location
        # selection in structure array
        depot_location = ssc['station'][
            ssc['station']['station_type'] == 'depot']['node_i']

        if not set(tess_initial_location).issubset(depot_location):
            raise Exception('tess is not initially at depot, please double check')

        return tessc


if __name__ == "__main__":
    tc_sys = TestCase()
    ppc = tc_sys.case33()
    tsc = tc_sys.siouxfalls()
    mgc = tc_sys.sscase()
    tessc = tc_sys.tesscase()

    pass
